# AOT (AWS Operations Tools) 設定ファイル（例）
# このファイルをコピーして aot_config.conf として使用してください
# cp aot_config.example.conf aot_config.conf
#
# 重要: aot_config.conf は個人の設定ファイルです
# - AWSプロファイル名などの固有情報が含まれます
# - .gitignore に含まれており、Gitで追跡されません
# - 認証情報は ~/.aws/credentials で管理してください

# =============================================================================
# AWS設定
# =============================================================================

# デフォルトのAWSプロファイル
AWS_DEFAULT_PROFILE="default"

# AWSリージョン
AWS_REGION="ap-northeast-1"

# get_pipelines.sh で使用するAWSプロファイル
# 例：CodePipelineがあるアカウントのプロファイル
AWS_PIPELINES_PROFILE="your-pipeline-account-profile"

# get_accounts.sh で使用するAWSプロファイル
# 例：AWS Organizations管理アカウントのプロファイル
AWS_ACCOUNTS_PROFILE="your-organizations-management-profile"

# =============================================================================
# キャッシュ設定
# =============================================================================

# キャッシュ有効期限（秒）1800 = 30分, 3600 = 1時間
CACHE_TTL=3600

# キャッシュを有効にするか (true/false)
CACHE_ENABLED=true

# =============================================================================
# 表示設定
# =============================================================================

# 出力形式 (table|json|csv)
DISPLAY_FORMAT="table"

# 静寂モード（プログレス表示なし） (true/false)
DISPLAY_QUIET=false

# プログレス表示間隔（何個ごとに表示するか）
DISPLAY_PROGRESS_INTERVAL=25

# =============================================================================
# フィルタリング設定
# =============================================================================

# デフォルトのJMESPathクエリフィルター
# 例: customizationsパイプラインのみ表示
# PIPELINES_DEFAULT_QUERY='pipelines[?ends_with(name, `-customizations-pipeline`)]'
# 例: 特定の文字列を含むパイプラインのみ表示
# PIPELINES_DEFAULT_QUERY='pipelines[?contains(name, `production`)]'
# 空文字列の場合は全パイプラインを表示
PIPELINES_DEFAULT_QUERY=""

# デフォルトのステータスフィルター (ALL|Succeeded|Failed|InProgress|Stopped)
PIPELINES_DEFAULT_STATUS="ALL"

# =============================================================================
# パフォーマンス設定
# =============================================================================

# 並列処理数（多すぎるとAPI制限に引っかかる可能性があります）
PERFORMANCE_MAX_PARALLEL=20